@page "/Books"
@using BookListManager.Models
@using BookListManager.Data
@inject NavigationManager Nav
@inject ICategoryRepository _categoryRepository 
@inject IBookRepository _bookRepository
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <p>Loading!!!</p>
    </div>
}
else
{

<div class=" container">
    <div class="row pt-4">
        <div class="col-6">
            <a class="navbar-brand" href="#">BookListManager</a>
        </div>
            @if (IsUserLoggedIn)
            {
                <div class="col-6 text-end">
                    <a class="btn btn-primary" href="/Book/AddBook">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                        </svg>
                        Create New Book
                    </a>
                </div>
            }
    </div>

    <div class="table-responsive mt-4">
        <table class="table table-hover table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Author</th>
                    <th>Category</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                 @foreach(var book in books)
                {
                    <tr>
                        <td>@book.Title</td>
                        <td>@book.Author</td>
                        <td>@(book.Category?.CategoryName)</td>
                        <td>

                                @if (IsUserLoggedIn)
                                {
                                    <a  class="btn btn-dark" href="/Book/EditBook/@book.BookId"><i class="bi bi-pencil-fill"></i> Edit</a>
                                    <EditForm
                                        Model="book"
                                        FormName="@($"formBook-{book.BookId}")"
                                              OnValidSubmit="@(() => { ConfirmDelete(book.BookId); })">
                                            <button type="submit" class="btn btn-danger" ><i class="bi bi-trash3"></i> Delete</button>
                        
                                    </EditForm>
                                }
                                else
                                {
                                <p>Login to access to action</p>
                                }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
}
@code {
    private IEnumerable<Book> books { get; set; } = new List<Book>();
    //private IEnumerable<Category> Categories  = new List<Category>();
    private bool IsProcessing { get; set; } = true;
    private bool IsUserLoggedIn { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            IsUserLoggedIn = authState.User.Identity.IsAuthenticated;


            await LoadBooksCategoriesList();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadBooksCategoriesList()
    {

        books = await _bookRepository.GetAllAsync();
        //Categories = await _categoryRepository.GetAllAsync();
        StateHasChanged();
     }

    private async Task ConfirmDelete(int bookId)
    {
        var isConfirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this book?");

        if (isConfirmed)
        {
            await DeleteBook(bookId);
        }
    }
    private async Task DeleteBook(int bookId)
    {
        await _bookRepository.DeleteAsync(bookId);
        await LoadBooksCategoriesList();
    }

}
