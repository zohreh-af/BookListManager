@page "/Books"
@attribute [StreamRendering]
@using BookListManager.Models
@using BookListManager.Data
@inject NavigationManager Nav
@inject AuthenticationService AuthService


<div class=" container">
    <div class="row pt-4">
        <div class="col-6">
            <a class="navbar-brand" href="#">BookListManager</a>
        </div>

        <div class="col-6 text-end">
            <a class="btn btn-primary" href="/Book/AddBook">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                </svg>
                Create New Book
            </a>
        </div>
    </div>

    <div class="table-responsive mt-4">
        <table class="table table-hover table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Author</th>
                    <th>Category</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                 @foreach(var book in books)
                {
                    <tr>
                        <td>@book.Title</td>
                        <td>@book.Author</td>
                        <td>Category</td>  
                        <td>
                            @if (isUserAuthorized)
                            {
                            <a  class="btn btn-dark" href="/Book/EditBook/@book.BookId"><i class="bi bi-pencil-fill"></i> Edit</a>
                            <EditForm
                                Model="book"
                                FormName="@($"formBook-{book.BookId}")"
                                OnValidSubmit="@(() => { DeleteBook(book.BookId); })">
                                    <button type="submit" class="btn btn-danger" ><i class="bi bi-trash3"></i> Delete</button>
                        
                            </EditForm>
                            }else
                            {
                                <p>You must Login first!</p>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Book> books;
    // private List<Category> categories = CategoriesRepository.GetCategories();
    private bool isUserAuthorized;

    protected override async Task OnInitializedAsync()
    {
        isUserAuthorized = await AuthService.IsAuthenticatedAsync();
    }

    private void DeleteBook(int bookId)
    {
        if (!isUserAuthorized) return;

        if (bookId > 0)
        {
          //  BooksRepository.DeleteBook(bookId);
            //Nav.NavigateTo("/weather");
          //  books = BooksRepository.GetBooksByAuthor("lena");
            StateHasChanged(); 
        }
    }

}
