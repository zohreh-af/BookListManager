@page "/Categories"
@attribute [StreamRendering]
@using BookListManager.Models
@inject NavigationManager Nav
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime JS


<div class=" container">
    <div class="row pt-4">
        <div class="col-6">
            <a class="navbar-brand" href="#">BookListManager</a>
        </div>

        <div class="col-6 text-end">
            <a class="btn btn-primary" href="/Categories/AddCategory">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                </svg>
                Create New Category
            </a>
        </div>
    </div>

    <div class="table-responsive mt-4">
        <table class="table table-hover table-striped">
            <thead>
                <tr>
                    <th>Category Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Category in Categories)
                {
                    <tr>
                        <td>@Category.CategoryName</td>
                        <td>
                                <a class="btn btn-dark" href="/Category/EditCategory/@Category.CategoryId"><i class="bi bi-pencil-fill"></i> Edit</a>
                                <EditForm Model="Category"
                                      FormName="@($"formBook-{Category.CategoryId}")"
                                      OnValidSubmit="@(() => { ConfirmDelete(Category.CategoryId); })">
                                    <button type="submit" class="btn btn-danger"><i class="bi bi-trash3"></i> Delete</button>

                                </EditForm>
                            
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private IEnumerable<Category> Categories { get; set; } = new List<Category>();
    // private List<Category> categories = CategoriesRepository.GetCategories();
    //private bool isUserAuthorized;

    // protected override async Task OnInitializedAsync()
    // {
    //     isUserAuthorized = await AuthService.IsAuthenticatedAsync();
    // }
    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        Categories = await _categoryRepository.GetAllAsync();
        StateHasChanged();
    }

    private async Task ConfirmDelete(int categoryId)
    {
        var isConfirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category?");

        if (isConfirmed)
        {
            await DeleteCategory(categoryId);
        }
    }
    private async Task DeleteCategory(int categoryId)
    {
        await _categoryRepository.DeleteAsync(categoryId);
        await LoadCategories();
    }

}
