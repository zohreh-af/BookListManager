@page "/Category/EditCategory/{id:int}"
@using BookListManager.Models
@inject NavigationManager Nav
@inject ICategoryRepository _categoryRepository 
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (Category != null)
{


    <div class="container mt-4">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h2>Edit Category</h2>
                </div>
                <div class="card-body">
                    <EditForm Model="Category" FormName="formCategory" OnValidSubmit="Submit">
                        <DataAnnotationsValidator></DataAnnotationsValidator>

                        <InputNumber @bind-Value="Category.CategoryId" hidden></InputNumber>
                        <div class="form-group mb-3">
                            <ValidationMessage For="() =>Category.CategoryName "></ValidationMessage>
                            <label class="form-label">Category Name</label>
                            <InputText @bind-Value="Category.CategoryName" class="form-control" placeholder="What is the Category?"></InputText>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <a href="/categories">Cancel</a>
                        </div>
                    </EditForm>
                </div>
            </div>

        </div>
    </div>


}
else
{
    <div class="container mt-4">
        <div class="alert alert-danger">
            <strong>Error!</strong> Book not found.
        </div>
    </div>
}



@code {
    [Parameter]
    public int id { get; set; }

    [SupplyParameterFromForm(FormName = "formCategory")]
    private Category? Category { get; set; }
    private bool IsUserLoggedIn { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        IsUserLoggedIn = authState.User.Identity.IsAuthenticated;

        if (!IsUserLoggedIn)
        {
            Nav.NavigateTo("/login");
        }
        else
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        if(id>0)
        {
            Category ??= await _categoryRepository.GetByIdAsync(this.id);
        }
    }

    private async void Submit()
    {
        if (Category != null)
        {
            await _categoryRepository.UpdateAsync(Category);
        }
        Nav.NavigateTo("/Categories");

    }

}
